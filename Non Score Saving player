<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Arcade Challenge Player</title>
    <link href="https://fonts.googleapis.com/css2?family=Bangers&family=Press+Start+2P&display=swap" rel="stylesheet">
    <style>
        body { background: linear-gradient(135deg, #0f0c29, #302b63, #24243e); color: #fff; font-family: 'Press Start 2P', cursive; display: flex; flex-direction: column; justify-content: center; align-items: center; min-height: 100vh; margin: 0; text-align: center; padding: 20px; box-sizing: border-box; }
        .container { background: rgba(0, 0, 0, 0.4); border: 5px solid #ff007f; border-radius: 40px; padding: 20px; box-shadow: 0 0 30px rgba(255, 0, 127, 0.5); max-width: 90%; width: 100%; position: relative; }
        
        #main-title { margin-bottom: 20px; flex-shrink: 0; }
        #main-title img { max-width: 100%; max-height: 20vh; height: auto; }

        #player-display { font-family: 'Press Start 2P', cursive; font-size: 3vw; color: #ffcc00; margin-bottom: 15px; }
        .challenge-section { background: #00ffff; color: #302b63; border-radius: 20px; padding: 20px; min-height: 200px; display: flex; flex-direction: column; justify-content: center; margin-bottom: 20px; box-shadow: inset 0 0 20px rgba(0, 0, 0, 0.5); }
        #challenge-text { font-size: 4vw; font-weight: bold; margin: 0; }
        #challenge-details { font-size: 2.2vw; color: #302b63; margin-top: 15px; opacity: 0.9; }
        
        .btn-container, .challenge-action-form { display: flex; flex-wrap: wrap; gap: 10px; justify-content: center; margin-top: 15px; }
        button { background: #ff007f; color: #fff; font-family: 'Press Start 2P', cursive; border: none; padding: 20px; font-size: 2.5vw; cursor: pointer; border-radius: 12px; text-transform: uppercase; transition: transform 0.2s, box-shadow 0.2s; box-shadow: 0 6px 0 #cc0066; }
        button:active { transform: translateY(3px); box-shadow: 0 3px 0 #cc0066; }
        
        .name-entry-form button { background-color: #00ffff; color: #302b63; box-shadow: 0 6px 0 #00cccc; }
        #done-btn { background: #ffcc00; color: #302b63; box-shadow: 0 6px 0 #ff9900; }
        #impossible-btn { background-color: #9d00ff; box-shadow: 0 6px 0 #6e00b3; }
        
        .name-entry-form { padding: 20px; margin-top: 15px; display: flex; flex-direction: column; gap: 15px; align-items: center; }
        .name-entry-form input[type="text"] { background: #fff; color: #000; border: none; padding: 15px; border-radius: 10px; font-family: 'Press Start 2P', cursive; font-size: 3vw; width: 80%; }
        .trivia-form { display: none; flex-direction: column; align-items: center; gap: 15px; margin-top: 15px; }
        .trivia-form input[type="text"] { width: 80%; padding: 15px; font-size: 3vw; border-radius: 10px; border: none; text-align: center; font-family: 'Press Start 2P', cursive; }

        @keyframes pulse-effect {
            0% { transform: scale(1); text-shadow: 0 0 5px #ff007f; }
            50% { transform: scale(1.05); text-shadow: 0 0 20px #ff007f, 0 0 30px #ff007f; }
            100% { transform: scale(1); text-shadow: 0 0 5px #ff007f; }
        }
        .score-pulse {
            color: #ff007f;
            display: inline-block;
            animation: pulse-effect 2s infinite ease-in-out;
        }

        @keyframes rainbow-pulse {
            0%   { box-shadow: 0 0 15px 5px #ff0000, 0 6px 0 #00cccc; }
            16%  { box-shadow: 0 0 15px 5px #ff7f00, 0 6px 0 #00cccc; }
            33%  { box-shadow: 0 0 15px 5px #ffff00, 0 6px 0 #00cccc; }
            50%  { box-shadow: 0 0 15px 5px #00ff00, 0 6px 0 #00cccc; }
            66%  { box-shadow: 0 0 15px 5px #0000ff, 0 6px 0 #00cccc; }
            83%  { box-shadow: 0 0 15px 5px #4b0082, 0 6px 0 #00cccc; }
            100% { box-shadow: 0 0 15px 5px #ff0000, 0 6px 0 #00cccc; }
        }
        #start-session-btn {
            background-color: #00ffff;
            color: #302b63;
            border: 2px solid #fff;
            animation: rainbow-pulse 4s linear infinite;
        }

    </style>
</head>
<body>
    <div class="container">
        <h1 id="main-title">
            <img src="https://raw.githubusercontent.com/ajersj-cmyk/arcade-challenge/main/header.PNG" alt="Ahlers Arcade Challenge">
        </h1>
        <p id="player-display" style="display: none;"></p>
        <div class="challenge-section" id="challenge-box">
            <p id="challenge-text">What is your name, Adventurer?</p>
            <div id="challenge-details"></div>
            <div class="name-entry-form" id="name-entry-form">
                <input type="text" id="player-name-input" placeholder="Enter Your Name" />
                <button id="start-session-btn">Start / Continue</button>
            </div>
            <div class="challenge-action-form" id="challenge-action-form" style="display: none;">
                <button id="complete-challenge-btn">Completed!</button>
                <button id="skip-challenge-btn">Skip (-5 pts)</button>
                <button id="impossible-btn">This is Impossible</button>
            </div>
            <div class="trivia-form" id="trivia-form">
                <input type="text" id="trivia-answer-input" placeholder="Your Answer" />
                <button id="submit-trivia-btn">Submit</button>
            </div>
        </div>
        <div class="btn-container">
            <button class="mode-toggle-btn" id="mode-toggle">Switch to Adult Mode</button>
            <button id="done-btn" style="display: none;">I'm Done!</button>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        // ### URLs ###
        const sheetyUrl = "https://script.google.com/macros/s/AKfycbyFS6cG3gCtOp6SLd0HuDSOfjR1vc9hlLCUfI5AHgTttV651hWQr8H4pdHxBI3-eJrx/exec";
        const challengesUrl = "https://script.google.com/macros/s/AKfycbxj_xzLgkkQqsXKyBA4mJLvuTbzuDemZv8SYXMVD6gPeTzQOsJjH8iiEYDaaaNFpjIc/exec"; 

        // ### Page Elements ###
        const challengeText = document.getElementById('challenge-text');
        const challengeDetails = document.getElementById('challenge-details');
        const nameEntryForm = document.getElementById('name-entry-form');
        const challengeActionForm = document.getElementById('challenge-action-form');
        const playerNameInput = document.getElementById('player-name-input');
        const startSessionBtn = document.getElementById('start-session-btn');
        const completeChallengeBtn = document.getElementById('complete-challenge-btn');
        const skipChallengeBtn = document.getElementById('skip-challenge-btn');
        const impossibleBtn = document.getElementById('impossible-btn');
        const playerDisplay = document.getElementById('player-display');
        const doneBtn = document.getElementById('done-btn');
        const triviaForm = document.getElementById('trivia-form');
        const triviaAnswerInput = document.getElementById('trivia-answer-input');
        const submitTriviaBtn = document.getElementById('submit-trivia-btn');
        const modeToggleBtn = document.getElementById('mode-toggle');

        // ### Game State Variables ###
        let allChallenges = [];
        let isKidMode = true;
        let currentPlayerName = null;
        let currentChallenge = null;
        let historicalScore = 0;
        let sessionScore = 0;
        let hiddenChallenges = JSON.parse(localStorage.getItem('hiddenChallenges')) || {};
        let challengeCounter = 0;

        // ### Core Functions ###
        const fetchChallenges = async () => {
            try {
                const response = await fetch(challengesUrl);
                if (!response.ok) throw new Error('Network response was not ok');
                allChallenges = await response.json();
                challengeText.textContent = "What is your name, Adventurer?";
            } catch (error) {
                console.error("Failed to fetch challenges:", error);
                challengeText.textContent = "Error: Could not load challenges. Please refresh.";
            }
        };
        
        const lookupPlayerScore = async (name) => {
            startSessionBtn.textContent = "Loading...";
            try {
                const response = await fetch(sheetyUrl);
                const data = await response.json();
                const playerScores = (data.sheet1 || []).filter(entry => entry.playername === name);
                return playerScores.reduce((total, entry) => total + (Number(entry.score) || 0), 0);
            } catch (error) {
                console.error("Could not look up score:", error);
                return 0;
            } finally {
                startSessionBtn.textContent = "Start / Continue";
            }
        };

        const addScoreToSheet = async (playerName, score, mode) => {
            if (score === 0) return;
            try {
                console.log("Attempting to POST score data to:", sheetyUrl);
                const dataToSend = { sheet1: { playername: playerName, score, mode } };
                console.log("Data being sent:", dataToSend);

                const response = await fetch(sheetyUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(dataToSend)
                });

                // --- DIAGNOSTIC CODE ---
                console.log("Response object from server:", response);
                alert(`Server responded with status: ${response.status} (${response.statusText}). Check the console for the full response.`);

                const responseText = await response.text();
                console.log("Full server response text:", responseText);
                // --- END DIAGNOSTIC CODE ---

            } catch (error) {
                console.error('FETCH FAILED:', error);
                alert(`The request to save the score failed. Check the console for a detailed error.`);
            }
        };

        const startNewChallenge = () => {
            let desiredMode = isKidMode ? 'Kid' : 'Adult';
            let challengePool;
            
            if (challengeCounter > 0 && challengeCounter % 5 === 0) {
                challengePool = allChallenges.filter(c => c.mode === 'Trivia');
            } else {
                challengePool = allChallenges.filter(c => c.mode === desiredMode);
            }

            const activeChallenges = challengePool.filter(c => !hiddenChallenges[c.uniqueId]);
            
            if (activeChallenges.length === 0) {
                challengeText.textContent = "Wow! You've completed all challenges in this mode!";
                challengeDetails.innerHTML = '';
                challengeActionForm.style.display = 'none';
                triviaForm.style.display = 'none';
                return;
            }

            currentChallenge = activeChallenges[Math.floor(Math.random() * activeChallenges.length)];
            challengeText.textContent = currentChallenge.text;
            challengeDetails.innerHTML = `Difficulty: ${currentChallenge.difficulty} | Points: ${currentChallenge.points}`;
            
            nameEntryForm.style.display = 'none';
            doneBtn.style.display = 'inline-block';
            modeToggleBtn.style.display = 'none';
            
            if (currentChallenge.mode === 'Trivia') {
                challengeActionForm.style.display = 'none';
                triviaForm.style.display = 'flex';
            } else {
                challengeActionForm.style.display = 'flex';
                triviaForm.style.display = 'none';
            }
        };

        const updateScore = (points) => {
            if (currentChallenge) {
                hiddenChallenges[currentChallenge.uniqueId] = true;
                localStorage.setItem('hiddenChallenges', JSON.stringify(hiddenChallenges));
            }

            sessionScore += points;
            const totalScore = historicalScore + sessionScore;
            playerDisplay.innerHTML = `Player: ${currentPlayerName} | Total Score: <span class="score-pulse">${totalScore}</span>`;
            challengeCounter++;
            startNewChallenge();
        };

        // ### Event Listeners ###
        startSessionBtn.addEventListener('click', async () => {
            const name = playerNameInput.value.trim();
            if (!name) { alert('Please enter your name.'); return; }
            
            if (allChallenges.length === 0) {
                alert('Challenges are still loading, please wait a moment!');
                return;
            }
            
            currentPlayerName = name;
            historicalScore = await lookupPlayerScore(name);
            sessionScore = 0;

            playerDisplay.innerHTML = `Player: ${currentPlayerName} | Total Score: <span class="score-pulse">${historicalScore}</span>`;
            playerDisplay.style.display = 'block';
            
            challengeCounter = 1;
            startNewChallenge();
        });

        completeChallengeBtn.addEventListener('click', () => updateScore(currentChallenge.points));
        skipChallengeBtn.addEventListener('click', () => updateScore(-5));
        impossibleBtn.addEventListener('click', () => updateScore(0));

        submitTriviaBtn.addEventListener('click', () => {
            const playerAnswer = triviaAnswerInput.value.trim().toLowerCase();
            const correctAnswers = Array.isArray(currentChallenge.answer) 
                ? currentChallenge.answer.map(a => a.toLowerCase()) 
                : [String(currentChallenge.answer).toLowerCase()];

            if (correctAnswers.includes(playerAnswer)) {
                alert(`Correct! +${currentChallenge.points} points!`);
                updateScore(currentChallenge.points);
            } else {
                alert(`Incorrect. The answer was: ${correctAnswers[0]}`);
                updateScore(0);
            }
            triviaAnswerInput.value = '';
        });

        doneBtn.addEventListener('click', async () => {
            if (currentPlayerName) {
                const mode = isKidMode ? 'Kid' : 'Adult';
                await addScoreToSheet(currentPlayerName, sessionScore, mode);
            }
        });
        
        modeToggleBtn.addEventListener('click', () => {
            isKidMode = !isKidMode;
            modeToggleBtn.textContent = isKidMode ? 'Switch to Adult Mode' : 'Switch to Kid Mode';
        });
        
        // Fetch challenges as soon as the page loads
        challengeText.textContent = "Loading challenges...";
        fetchChallenges();
    });
</script>
</body>
</html>
